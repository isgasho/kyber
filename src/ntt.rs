use itertools::Itertools;
use ::params::{ N, Q };
use ::reduce::{ montgomery_reduce, barrett_reduce };


const BITREV_TABLE: [u16; N] = [
    0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240,
    8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248,
    4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244,
    12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252,
    2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242,
    10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250,
    6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246,
    14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254,
    1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241,
    9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249,
    5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245,
    13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253,
    3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243,
    11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251,
    7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247,
    15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255,
];


pub fn bitrev_vector(poly: &mut [u16; N]) {
    for (i, r) in BITREV_TABLE.iter()
        .map(|&r| r as usize)
        .enumerate()
        .filter(|&(i, r)| i < r)
    {
        poly.swap(i, r);
    }
}


pub fn mul_coefficients(poly: &mut [u16; N], factors: &[u16; N]) {
    for i in 0..N {
        poly[i] = montgomery_reduce(u32::from(poly[i]) * u32::from(factors[i]));
    }
}

pub fn ntt(a: &mut [u16; N], omega: &[u16; N / 2]) {
    for level in 0..8 {
        for start in 0..(1 << level) {
            for (jt, j) in Itertools::step(start..(N - 1), 2 * (1 << level)).enumerate() {
                let w = omega[jt];
                let tmp = a[j];

                a[j] =
                    if level & 1 != 0 { barrett_reduce(tmp + a[j + (1 << level)]) }
                    else { tmp + a[j + (1 << level)] };

                let t = u32::from(w) * (u32::from(tmp) + 4 * (Q as u32) - u32::from(a[j + (1 << level)]));
                a[j + (1 << level)] = montgomery_reduce(t);
            }
        }
    }
}
